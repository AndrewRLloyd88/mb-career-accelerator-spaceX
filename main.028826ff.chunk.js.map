{"version":3,"sources":["pages/StarshipPage/StarshipPage.jsx","App.js","services/sw-api.js","serviceWorker.js","index.js"],"names":["StarshipPage","starship","location","state","className","name","model","to","App","starships","getStarship","idx","fetch","mode","then","res","json","this","setState","results","exact","path","render","map","pathname","key","Component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yWAuBeA,EAnBM,SAAC,GAAgB,IAC9BC,EAD6B,EAAdC,SACKC,MAC1B,OACE,yBAAKC,UAAU,gBACZH,EACC,yBAAKG,UAAU,yBACb,uCACA,8BAAOH,EAASI,MAChB,wCACA,8BAAOJ,EAASK,OAChB,kBAAC,IAAD,CAAMC,GAAG,KAAT,WAGF,4CCoCOC,E,2MA7CbL,MAAQ,CACNM,UAAW,I,EAGbC,YAAc,SAACC,GACb,OAAO,EAAKR,MAAMM,UAAUE,I,qLCVvBC,MAAM,GAAD,OAHG,yBAGH,aAAyB,CAACC,KAAM,SACzCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,W,ODaXP,E,OACNQ,KAAKC,SAAS,CAAET,UAAWA,EAAUU,U,gFAG7B,IAAD,OACP,OACE,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAAlB,uBACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAC5B,iCACG,EAAKnB,MAAMM,UAAUc,KAAI,SAAAtB,GAAQ,OAChC,kBAAC,IAAD,CACEM,GAAI,CACFiB,SAAU,aACVrB,MAAOF,GAETwB,IAAKxB,EAASI,MAEbJ,EAASI,aAKlB,kBAAC,IAAD,CAAOgB,KAAK,aAAaC,OAAQ,gBAAEpB,EAAF,EAAEA,SAAF,OAC/B,kBAAC,EAAD,CACEA,SAAUA,a,GArCNwB,aEMEC,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAASC,MACvB,2DCXNC,IAAST,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBU,SAASC,eAAe,SD0H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.028826ff.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './StarshipPage.css';\n\nconst StarshipPage = ({location}) => {\n  const starship = location.state;\n  return (\n    <div className='StarshipPage'>\n      {starship ?\n        <div className='StarshipPage-starship'>\n          <span>NAME:</span>\n          <span>{starship.name}</span>\n          <span>MODEL:</span>\n          <span>{starship.model}</span>\n          <Link to='/'>RETURN</Link>\n        </div>\n        :\n        <h3>Loading...</h3>\n      }\n    </div>\n  );\n};\n\nexport default StarshipPage;","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch, Link } from 'react-router-dom';\nimport { getAllStarships } from './services/sw-api';\nimport StarshipPage from './pages/StarshipPage/StarshipPage';\n\nclass App extends Component {\n  \n  state = {\n    starships: []\n  };\n\n  getStarship = (idx) => {\n    return this.state.starships[idx];\n  }\n\n  async componentDidMount() {\n    const starships = await getAllStarships();\n    this.setState({ starships: starships.results });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">STAR WARS STARSHIPS</header>\n        <Switch>\n          <Route exact path='/' render={() => \n            <section>\n              {this.state.starships.map(starship => \n                <Link\n                  to={{\n                    pathname: '/starships',\n                    state: starship\n                  }}\n                  key={starship.name}\n                >\n                  {starship.name}\n                </Link>\n              )}\n            </section>\n          }/>\n          <Route path='/starships' render={({location}) => \n            <StarshipPage\n              location={location}\n            />\n          }/>\n        </Switch>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const BASE_URL = 'https://swapi.dev/api/';\n\nexport function getAllStarships() {\n  return fetch(`${BASE_URL}starships`, {mode: \"cors\"})\n    .then(res => res.json());\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}